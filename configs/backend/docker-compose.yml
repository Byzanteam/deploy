version: '3.5'
services:

  postgres:
    image: ${POSTGRES_IMAGE}
    container_name: ${POSTGRES_NAME}
#    restart: always
    env_file:
    - api.local.env
    ports:
    - ${POSTGRES_PORT}:5432
    networks:
    - nitrogen
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
    - ${POSTGRES_PATH}:/var/lib/postgresql/data:z
    - ./initdb:/docker-entrypoint-initdb.d

  rabbitmq:
    image: ${RABITTMQ_IMAGE}
    container_name: ${RABITTMQ_NAME}
    env_file:
    - api.local.env
#    restart: always
    ports:
    - 15672:15672
    - ${RABITTMQ_PORT}:5672
#    - 15672:15672
    networks:
    - nitrogen

  redis:
    image: ${REDIS_IMAGE}
    container_name: ${REDIS_NAME}
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - ${REDIS_PATH}:/data
    networks:
      - nitrogen      

  minio:
    image: ${MINIO_IMAGE}
    container_name: ${MINIO_NAME}
    volumes:
    - ./databot/minio/config:/config
    ports:
    - ${MINIO_PORT}:9000
#    restart: always
    healthcheck:
      test: ["CMD-SHELL", "nc -z rabbitmq 5672"]
      interval: 10s
      timeout: 5s
      retries: 5
    entrypoint: "minio server --config-dir /config /data"
    networks:
    - nitrogen

  elasticsearch:
    image: ${ES_IMAGE}
    container_name: ${ES_MASTER_CONTAINER}
    env_file:
    - api.local.env
    ports:
      - 9200:9200
    healthcheck:
        test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
        interval: 30s
        timeout: 30s
        retries: 3
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile: 65536
    volumes:
    - ${ES_MASTER_PATH}:/usr/share/elasticsearch/data
    networks:
    - nitrogen

  logstash:
    image: ${LOGSTASH_IMAGE}
    container_name: ${LOGSTASH_CONTAINER}
    volumes:
    - ./databot/logstash:/usr/share/logstash/pipeline
    - ${LOGS_PATH}:/usr/share/logstash/logs
    env_file:
    - api.local.env
    depends_on:
    - elasticsearch
    - rabbitmq
    - postgres
    networks:
    - nitrogen

  dataSource:
    image: registry.cn-hongkong.aliyuncs.com/byzanteam/nitrogen-datasource:${TAG}
    container_name: datasource
    env_file:
    - api.local.env
    depends_on:
    - postgres
    - rabbitmq
    volumes:
    - ${LOGS_PATH}/datasource_logs/:/logs/
    ports:
    - ${DATASOURCE_PORT}:5000
    networks:
    - nitrogen

  projects:
    image: ${REGISTRY}/byzanteam/nitrogen-go:${TAG}
    container_name: projects
    command: ["/nitrogen-go/projects"]
    environment:
      - STAGE=${STAGE}    
    ports:
      - 50052:50052
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
    depends_on:
      - elasticsearch
      - postgres
    volumes:
      - ./app:/nitrogen-go/configs
      - ${LOGS_PATH}/project_log:/data/nitrogen_log/project_log
    networks:
      - nitrogen

  authentication:
    image: ${REGISTRY}/byzanteam/nitrogen-go:${TAG}
    container_name: authentication
    command: ["/nitrogen-go/authentication"]
    environment:
      - STAGE=${STAGE}    
    ports:
      - 50051:50051
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
    depends_on:
      - elasticsearch
      - projects
      - postgres
    volumes:
      - ./app:/nitrogen-go/configs
      - ${LOGS_PATH}/auth_log:/data/nitrogen_log/auth_log
    networks:
      - nitrogen

  etl:
    image: ${REGISTRY}/byzanteam/nitrogen-go:${TAG}
    container_name: etl
    command: ["/nitrogen-go/etl"]
    environment:
      - STAGE=${STAGE}    
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
    depends_on:
      - elasticsearch
      - projects
      - postgres
      - rabbitmq
    volumes:
      - ./app:/nitrogen-go/configs
      - ${LOGS_PATH}/etl_log:/data/nitrogen_log/etl_log
    networks:
      - nitrogen

  gateway:
    image: ${REGISTRY}/byzanteam/nitrogen-go:${TAG}
    container_name: gateway
    command: ["/nitrogen-go/gateway"]
    environment:
      - STAGE=${STAGE}    
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
    ports:
      - 8080:8080
    volumes:
      - ./app:/nitrogen-go/configs
      - ${LOGS_PATH}/gateway_log:/data/nitrogen_log/gateway_log
    depends_on:
      - elasticsearch
      - authentication
      - etl
      - projects
    networks:
      - nitrogen

networks:
  nitrogen:
    name: nitrogen
